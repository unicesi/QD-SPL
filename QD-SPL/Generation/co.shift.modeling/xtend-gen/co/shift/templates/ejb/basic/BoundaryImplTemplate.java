package co.shift.templates.ejb.basic;

import co.shift.generators.domain.DomainCodeGenerator;
import com.google.common.base.Objects;
import domainmetamodel.AddElement;
import domainmetamodel.Association;
import domainmetamodel.Attribute;
import domainmetamodel.BusinessEntity;
import domainmetamodel.ContractElements;
import domainmetamodel.Contracts;
import domainmetamodel.Create;
import domainmetamodel.DataType;
import domainmetamodel.Delete;
import domainmetamodel.DeleteElement;
import domainmetamodel.ListAll;
import domainmetamodel.ListElements;
import domainmetamodel.Multiple;
import domainmetamodel.Simple;
import domainmetamodel.Update;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class BoundaryImplTemplate {
  private static ArrayList<String> importTOs = new ArrayList<String>();
  
  public static CharSequence generate(final BusinessEntity be, final String packageName, final List<Association> associations, final IFileSystemAccess fsa) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package co.shift.");
    String _lowerCase = packageName.toLowerCase();
    _builder.append(_lowerCase, "");
    _builder.append(".");
    String _name = be.getName();
    String _lowerCase_1 = _name.toLowerCase();
    _builder.append(_lowerCase_1, "");
    _builder.append(".boundary;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.ejb.EJB;");
    _builder.newLine();
    _builder.append("import javax.ejb.Stateless;");
    _builder.newLine();
    _builder.append("import javax.persistence.EntityManager;");
    _builder.newLine();
    _builder.append("import javax.persistence.NoResultException;");
    _builder.newLine();
    _builder.append("import javax.persistence.PersistenceContext;");
    _builder.newLine();
    _builder.append("import javax.persistence.Query;");
    _builder.newLine();
    _builder.append("import javax.persistence.TypedQuery;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.persistence.exceptions.DatabaseException;");
    _builder.newLine();
    {
      boolean _and = false;
      List<Association> _detailMultipleAssociations = DomainCodeGenerator.getDetailMultipleAssociations(be, associations);
      boolean _notEquals = (!Objects.equal(_detailMultipleAssociations, null));
      if (!_notEquals) {
        _and = false;
      } else {
        boolean _isDetail = DomainCodeGenerator.isDetail(be);
        boolean _not = (!_isDetail);
        _and = _not;
      }
      if (_and) {
        _builder.append("import co.shift.");
        String _lowerCase_2 = packageName.toLowerCase();
        _builder.append(_lowerCase_2, "");
        _builder.append(".");
        String _name_1 = be.getName();
        String _lowerCase_3 = _name_1.toLowerCase();
        _builder.append(_lowerCase_3, "");
        _builder.append(".control.I");
        String _name_2 = be.getName();
        String _firstUpper = StringExtensions.toFirstUpper(_name_2);
        _builder.append(_firstUpper, "");
        _builder.append("DAO;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("import co.shift.");
    String _lowerCase_4 = packageName.toLowerCase();
    _builder.append(_lowerCase_4, "");
    _builder.append(".to.");
    String _name_3 = be.getName();
    _builder.append(_name_3, "");
    _builder.append("TO;");
    _builder.newLineIfNotEmpty();
    {
      EList<Contracts> _contracts = be.getContracts();
      for(final Contracts contract : _contracts) {
        {
          boolean _or = false;
          if (((contract instanceof AddElement) || (contract instanceof DeleteElement))) {
            _or = true;
          } else {
            _or = (contract instanceof ListElements);
          }
          if (_or) {
            Multiple _association = ((ContractElements) contract).getAssociation();
            final BusinessEntity relatedEntity = _association.getEntity();
            _builder.newLineIfNotEmpty();
            {
              String _name_4 = relatedEntity.getName();
              boolean _contains = BoundaryImplTemplate.importTOs.contains(_name_4);
              boolean _not_1 = (!_contains);
              if (_not_1) {
                _builder.append("import co.shift.");
                String _lowerCase_5 = packageName.toLowerCase();
                _builder.append(_lowerCase_5, "");
                _builder.append(".to.");
                String _name_5 = relatedEntity.getName();
                _builder.append(_name_5, "");
                _builder.append("TO;");
                _builder.newLineIfNotEmpty();
                String _name_6 = relatedEntity.getName();
                final boolean result = BoundaryImplTemplate.importTOs.add(_name_6);
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.newLine();
    {
      boolean _and_1 = false;
      List<Association> _detailMultipleAssociations_1 = DomainCodeGenerator.getDetailMultipleAssociations(be, associations);
      boolean _notEquals_1 = (!Objects.equal(_detailMultipleAssociations_1, null));
      if (!_notEquals_1) {
        _and_1 = false;
      } else {
        boolean _isDetail_1 = DomainCodeGenerator.isDetail(be);
        boolean _not_2 = (!_isDetail_1);
        _and_1 = _not_2;
      }
      if (_and_1) {
        String _name_7 = be.getName();
        String _extendContribution = DomainCodeGenerator.extendContribution("_r_1", DomainCodeGenerator.CONTRIBUTE_TO_IMPORT, packageName, _name_7);
        _builder.append(_extendContribution, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    String _name_8 = be.getName();
    String _extendContribution_1 = DomainCodeGenerator.extendContribution("_r_2_10", DomainCodeGenerator.CONTRIBUTE_TO_IMPORT, packageName, _name_8);
    _builder.append(_extendContribution_1, "");
    _builder.newLineIfNotEmpty();
    String _name_9 = be.getName();
    String _lowerCase_6 = _name_9.toLowerCase();
    String _plus = (_lowerCase_6 + "");
    Attribute _iD = DomainCodeGenerator.getID(be);
    String _name_10 = _iD.getName();
    String _firstUpper_1 = StringExtensions.toFirstUpper(_name_10);
    String _plus_1 = (_plus + _firstUpper_1);
    String authContribution = DomainCodeGenerator.extendContribution("_r_2_11_15_17", DomainCodeGenerator.CONTRIBUTE_TO_BIMPL, _plus_1);
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.newLine();
    {
      boolean _and_2 = false;
      boolean _and_3 = false;
      boolean _isIsAuthenticable = be.isIsAuthenticable();
      if (!_isIsAuthenticable) {
        _and_3 = false;
      } else {
        boolean _notEquals_2 = (!Objects.equal(authContribution, null));
        _and_3 = _notEquals_2;
      }
      if (!_and_3) {
        _and_2 = false;
      } else {
        boolean _equals = authContribution.equals("");
        boolean _not_3 = (!_equals);
        _and_2 = _not_3;
      }
      if (_and_2) {
        String _name_11 = be.getName();
        String _extendContribution_2 = DomainCodeGenerator.extendContribution("_r_2_11_15_17", DomainCodeGenerator.CONTRIBUTE_TO_IMPORT, packageName, _name_11);
        _builder.append(_extendContribution_2, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("import co.shift.");
    String _lowerCase_7 = packageName.toLowerCase();
    _builder.append(_lowerCase_7, "");
    _builder.append(".");
    String _name_12 = be.getName();
    String _lowerCase_8 = _name_12.toLowerCase();
    _builder.append(_lowerCase_8, "");
    _builder.append(".entity.");
    String _name_13 = be.getName();
    String _firstUpper_2 = StringExtensions.toFirstUpper(_name_13);
    _builder.append(_firstUpper_2, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    {
      List<Association> _detailMultipleAssociations_2 = DomainCodeGenerator.getDetailMultipleAssociations(be, associations);
      for(final Association association : _detailMultipleAssociations_2) {
        EObject _eContainer = association.eContainer();
        final BusinessEntity container = ((BusinessEntity) _eContainer);
        _builder.newLineIfNotEmpty();
        {
          boolean _isDetail_2 = DomainCodeGenerator.isDetail(be);
          boolean _not_4 = (!_isDetail_2);
          if (_not_4) {
            _builder.append("import co.shift.");
            String _lowerCase_9 = packageName.toLowerCase();
            _builder.append(_lowerCase_9, "");
            _builder.append(".");
            String _name_14 = be.getName();
            String _lowerCase_10 = _name_14.toLowerCase();
            _builder.append(_lowerCase_10, "");
            _builder.append(".entity.");
            String _name_15 = container.getName();
            String _firstUpper_3 = StringExtensions.toFirstUpper(_name_15);
            String _name_16 = be.getName();
            String _firstUpper_4 = StringExtensions.toFirstUpper(_name_16);
            String _plus_2 = (_firstUpper_3 + _firstUpper_4);
            _builder.append(_plus_2, "");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("import co.shift.");
            String _lowerCase_11 = packageName.toLowerCase();
            _builder.append(_lowerCase_11, "");
            _builder.append(".");
            String _name_17 = be.getName();
            String _lowerCase_12 = _name_17.toLowerCase();
            _builder.append(_lowerCase_12, "");
            _builder.append(".entity.");
            String _name_18 = container.getName();
            String _firstUpper_5 = StringExtensions.toFirstUpper(_name_18);
            String _name_19 = be.getName();
            String _firstUpper_6 = StringExtensions.toFirstUpper(_name_19);
            String _plus_3 = (_firstUpper_5 + _firstUpper_6);
            _builder.append(_plus_3, "");
            _builder.append("PK;");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("@Stateless");
    _builder.newLine();
    _builder.append("public class ");
    String _name_20 = be.getName();
    String _firstUpper_7 = StringExtensions.toFirstUpper(_name_20);
    _builder.append(_firstUpper_7, "");
    _builder.append("Manager implements I");
    String _name_21 = be.getName();
    String _firstUpper_8 = StringExtensions.toFirstUpper(_name_21);
    _builder.append(_firstUpper_8, "");
    _builder.append("Manager {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@PersistenceContext(unitName = \"co.shift.");
    String _lowerCase_13 = packageName.toLowerCase();
    _builder.append(_lowerCase_13, "\t");
    _builder.append(".");
    String _name_22 = be.getName();
    String _lowerCase_14 = _name_22.toLowerCase();
    _builder.append(_lowerCase_14, "\t");
    _builder.append("\")");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private EntityManager em;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      boolean _and_4 = false;
      List<Association> _detailMultipleAssociations_3 = DomainCodeGenerator.getDetailMultipleAssociations(be, associations);
      boolean _notEquals_3 = (!Objects.equal(_detailMultipleAssociations_3, null));
      if (!_notEquals_3) {
        _and_4 = false;
      } else {
        boolean _isDetail_3 = DomainCodeGenerator.isDetail(be);
        boolean _not_5 = (!_isDetail_3);
        _and_4 = _not_5;
      }
      if (_and_4) {
        _builder.append("\t");
        _builder.append("@EJB");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("private I");
        String _name_23 = be.getName();
        String _firstUpper_9 = StringExtensions.toFirstUpper(_name_23);
        _builder.append(_firstUpper_9, "\t");
        _builder.append("DAO ");
        String _name_24 = be.getName();
        String _lowerCase_15 = _name_24.toLowerCase();
        _builder.append(_lowerCase_15, "\t");
        _builder.append("DAO;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      boolean _and_5 = false;
      boolean _and_6 = false;
      boolean _isIsAuthenticable_1 = be.isIsAuthenticable();
      if (!_isIsAuthenticable_1) {
        _and_6 = false;
      } else {
        boolean _notEquals_4 = (!Objects.equal(authContribution, null));
        _and_6 = _notEquals_4;
      }
      if (!_and_6) {
        _and_5 = false;
      } else {
        boolean _equals_1 = authContribution.equals("");
        boolean _not_6 = (!_equals_1);
        _and_5 = _not_6;
      }
      if (_and_5) {
        _builder.append("\t");
        String _extendContribution_3 = DomainCodeGenerator.extendContribution("_r_2_11_15_17", DomainCodeGenerator.CONTRIBUTE_TO_ATTRIBUTE);
        _builder.append(_extendContribution_3, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    String _name_25 = be.getName();
    final String attribute = DomainCodeGenerator.extendContribution("_r_1", DomainCodeGenerator.CONTRIBUTE_TO_ATTRIBUTE, _name_25);
    _builder.newLineIfNotEmpty();
    {
      boolean _and_7 = false;
      boolean _and_8 = false;
      boolean _notEquals_5 = (!Objects.equal(attribute, null));
      if (!_notEquals_5) {
        _and_8 = false;
      } else {
        boolean _equals_2 = attribute.equals("");
        boolean _not_7 = (!_equals_2);
        _and_8 = _not_7;
      }
      if (!_and_8) {
        _and_7 = false;
      } else {
        boolean _and_9 = false;
        List<Association> _detailMultipleAssociations_4 = DomainCodeGenerator.getDetailMultipleAssociations(be, associations);
        boolean _notEquals_6 = (!Objects.equal(_detailMultipleAssociations_4, null));
        if (!_notEquals_6) {
          _and_9 = false;
        } else {
          boolean _isDetail_4 = DomainCodeGenerator.isDetail(be);
          boolean _not_8 = (!_isDetail_4);
          _and_9 = _not_8;
        }
        _and_7 = _and_9;
      }
      if (_and_7) {
        _builder.append("\t");
        _builder.append(attribute, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    final String attribute2 = DomainCodeGenerator.extendContribution("_r_2_10", DomainCodeGenerator.CONTRIBUTE_TO_ATTRIBUTE);
    _builder.newLineIfNotEmpty();
    {
      boolean _and_10 = false;
      boolean _notEquals_7 = (!Objects.equal(attribute2, null));
      if (!_notEquals_7) {
        _and_10 = false;
      } else {
        boolean _equals_3 = attribute2.equals("");
        boolean _not_9 = (!_equals_3);
        _and_10 = _not_9;
      }
      if (_and_10) {
        _builder.append("\t");
        _builder.append(attribute2, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        String _extendContribution_4 = DomainCodeGenerator.extendContribution("_r_2_10", DomainCodeGenerator.CONTRIBUTE_TO_GENERATION, fsa, packageName, be);
        _builder.append(_extendContribution_4, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      EList<Contracts> _contracts_1 = be.getContracts();
      for(final Contracts contract_1 : _contracts_1) {
        {
          if ((contract_1 instanceof Create)) {
            _builder.append("\t");
            _builder.append("public boolean ");
            String _name_26 = ((Contracts) contract_1).getName();
            _builder.append(_name_26, "\t");
            _builder.append("(");
            String _name_27 = be.getName();
            _builder.append(_name_27, "\t");
            _builder.append("TO ");
            String _name_28 = be.getName();
            String _lowerCase_16 = _name_28.toLowerCase();
            _builder.append(_lowerCase_16, "\t");
            _builder.append(") throws Exception {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            String _extendContribution_5 = DomainCodeGenerator.extendContribution("_r_2_10", DomainCodeGenerator.CONTRIBUTE_TO_BIMPL, contract_1, be, null, null, null, null, null, Integer.valueOf(0));
            _builder.append(_extendContribution_5, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            Attribute id = DomainCodeGenerator.getID(be);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            String _name_29 = be.getName();
            String _firstUpper_10 = StringExtensions.toFirstUpper(_name_29);
            _builder.append(_firstUpper_10, "\t\t");
            _builder.append(" found");
            String _name_30 = be.getName();
            String _firstUpper_11 = StringExtensions.toFirstUpper(_name_30);
            _builder.append(_firstUpper_11, "\t\t");
            _builder.append(" = em.find(");
            String _name_31 = be.getName();
            String _firstUpper_12 = StringExtensions.toFirstUpper(_name_31);
            _builder.append(_firstUpper_12, "\t\t");
            _builder.append(".class, ");
            String _name_32 = be.getName();
            String _lowerCase_17 = _name_32.toLowerCase();
            _builder.append(_lowerCase_17, "\t\t");
            _builder.append(".get");
            String _name_33 = id.getName();
            String _firstUpper_13 = StringExtensions.toFirstUpper(_name_33);
            _builder.append(_firstUpper_13, "\t\t");
            _builder.append("());");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("if (found");
            String _name_34 = be.getName();
            String _firstUpper_14 = StringExtensions.toFirstUpper(_name_34);
            _builder.append(_firstUpper_14, "\t\t");
            _builder.append(" != null)");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("throw new Exception(\"");
            String _name_35 = be.getName();
            String _firstUpper_15 = StringExtensions.toFirstUpper(_name_35);
            _builder.append(_firstUpper_15, "\t\t\t");
            _builder.append(" Alredy Exists\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("else {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            String _name_36 = be.getName();
            String _firstUpper_16 = StringExtensions.toFirstUpper(_name_36);
            _builder.append(_firstUpper_16, "\t\t\t");
            _builder.append(" new");
            String _name_37 = be.getName();
            String _firstUpper_17 = StringExtensions.toFirstUpper(_name_37);
            _builder.append(_firstUpper_17, "\t\t\t");
            _builder.append(" = new ");
            String _name_38 = be.getName();
            String _firstUpper_18 = StringExtensions.toFirstUpper(_name_38);
            _builder.append(_firstUpper_18, "\t\t\t");
            _builder.append("();");
            _builder.newLineIfNotEmpty();
            {
              EList<Attribute> _attributes = be.getAttributes();
              for(final Attribute a : _attributes) {
                _builder.append("\t");
                _builder.append("\t\t");
                _builder.append("new");
                String _name_39 = be.getName();
                String _firstUpper_19 = StringExtensions.toFirstUpper(_name_39);
                _builder.append(_firstUpper_19, "\t\t\t");
                _builder.append(".set");
                String _name_40 = a.getName();
                String _firstUpper_20 = StringExtensions.toFirstUpper(_name_40);
                _builder.append(_firstUpper_20, "\t\t\t");
                _builder.append("(");
                String _name_41 = be.getName();
                String _lowerCase_18 = _name_41.toLowerCase();
                _builder.append(_lowerCase_18, "\t\t\t");
                _builder.append(".get");
                String _name_42 = a.getName();
                String _firstUpper_21 = StringExtensions.toFirstUpper(_name_42);
                _builder.append(_firstUpper_21, "\t\t\t");
                _builder.append("());");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t");
            _builder.append("\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("try {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("em.persist(new");
            String _name_43 = be.getName();
            String _firstUpper_22 = StringExtensions.toFirstUpper(_name_43);
            _builder.append(_firstUpper_22, "\t\t\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("em.flush();");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("return true;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("} catch (DatabaseException e) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("return false;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
        {
          if ((contract_1 instanceof Update)) {
            _builder.append("\t");
            _builder.append("public boolean ");
            String _name_44 = ((Contracts) contract_1).getName();
            _builder.append(_name_44, "\t");
            _builder.append("(");
            String _name_45 = be.getName();
            _builder.append(_name_45, "\t");
            _builder.append("TO ");
            String _name_46 = be.getName();
            String _lowerCase_19 = _name_46.toLowerCase();
            _builder.append(_lowerCase_19, "\t");
            _builder.append(") throws Exception {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            String _extendContribution_6 = DomainCodeGenerator.extendContribution("_r_2_10", DomainCodeGenerator.CONTRIBUTE_TO_BIMPL, contract_1, be, null, null, null, null, null, Integer.valueOf(0));
            _builder.append(_extendContribution_6, "\t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            Attribute id_1 = DomainCodeGenerator.getID(be);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            String _name_47 = be.getName();
            String _firstUpper_23 = StringExtensions.toFirstUpper(_name_47);
            _builder.append(_firstUpper_23, "\t\t");
            _builder.append(" found");
            String _name_48 = be.getName();
            String _firstUpper_24 = StringExtensions.toFirstUpper(_name_48);
            _builder.append(_firstUpper_24, "\t\t");
            _builder.append(" = em.find(");
            String _name_49 = be.getName();
            String _firstUpper_25 = StringExtensions.toFirstUpper(_name_49);
            _builder.append(_firstUpper_25, "\t\t");
            _builder.append(".class, ");
            String _name_50 = be.getName();
            String _lowerCase_20 = _name_50.toLowerCase();
            _builder.append(_lowerCase_20, "\t\t");
            _builder.append(".get");
            String _name_51 = id_1.getName();
            String _firstUpper_26 = StringExtensions.toFirstUpper(_name_51);
            _builder.append(_firstUpper_26, "\t\t");
            _builder.append("());");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("if (found");
            String _name_52 = be.getName();
            String _firstUpper_27 = StringExtensions.toFirstUpper(_name_52);
            _builder.append(_firstUpper_27, "\t\t");
            _builder.append(" == null)");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("throw new Exception(\"");
            String _name_53 = be.getName();
            String _firstUpper_28 = StringExtensions.toFirstUpper(_name_53);
            _builder.append(_firstUpper_28, "\t\t\t");
            _builder.append(" Doesn\'t Exists\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("else {");
            _builder.newLine();
            {
              EList<Attribute> _attributes_1 = be.getAttributes();
              for(final Attribute a_1 : _attributes_1) {
                _builder.append("\t");
                _builder.append("\t\t");
                _builder.append("found");
                String _name_54 = be.getName();
                String _firstUpper_29 = StringExtensions.toFirstUpper(_name_54);
                _builder.append(_firstUpper_29, "\t\t\t");
                _builder.append(".set");
                String _name_55 = a_1.getName();
                String _firstUpper_30 = StringExtensions.toFirstUpper(_name_55);
                _builder.append(_firstUpper_30, "\t\t\t");
                _builder.append("(");
                String _name_56 = be.getName();
                String _lowerCase_21 = _name_56.toLowerCase();
                _builder.append(_lowerCase_21, "\t\t\t");
                _builder.append(".get");
                String _name_57 = a_1.getName();
                String _firstUpper_31 = StringExtensions.toFirstUpper(_name_57);
                _builder.append(_firstUpper_31, "\t\t\t");
                _builder.append("());");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("try {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("em.merge(found");
            String _name_58 = be.getName();
            String _firstUpper_32 = StringExtensions.toFirstUpper(_name_58);
            _builder.append(_firstUpper_32, "\t\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("em.flush();");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("return true;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("} catch (DatabaseException e) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("return false;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
        {
          if ((contract_1 instanceof Delete)) {
            _builder.append("\t");
            _builder.append("public boolean ");
            String _name_59 = ((Contracts) contract_1).getName();
            _builder.append(_name_59, "\t");
            _builder.append("(");
            String _name_60 = be.getName();
            _builder.append(_name_60, "\t");
            _builder.append("TO ");
            String _name_61 = be.getName();
            String _lowerCase_22 = _name_61.toLowerCase();
            _builder.append(_lowerCase_22, "\t");
            _builder.append(") throws Exception {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            String _extendContribution_7 = DomainCodeGenerator.extendContribution("_r_2_10", DomainCodeGenerator.CONTRIBUTE_TO_BIMPL, contract_1, be, null, null, null, null, null, Integer.valueOf(0));
            _builder.append(_extendContribution_7, "\t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            Attribute id_2 = DomainCodeGenerator.getID(be);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            String _name_62 = be.getName();
            String _firstUpper_33 = StringExtensions.toFirstUpper(_name_62);
            _builder.append(_firstUpper_33, "\t\t");
            _builder.append(" found");
            String _name_63 = be.getName();
            String _firstUpper_34 = StringExtensions.toFirstUpper(_name_63);
            _builder.append(_firstUpper_34, "\t\t");
            _builder.append(" = em.find(");
            String _name_64 = be.getName();
            String _firstUpper_35 = StringExtensions.toFirstUpper(_name_64);
            _builder.append(_firstUpper_35, "\t\t");
            _builder.append(".class, ");
            String _name_65 = be.getName();
            String _lowerCase_23 = _name_65.toLowerCase();
            _builder.append(_lowerCase_23, "\t\t");
            _builder.append(".get");
            String _name_66 = id_2.getName();
            String _firstUpper_36 = StringExtensions.toFirstUpper(_name_66);
            _builder.append(_firstUpper_36, "\t\t");
            _builder.append("());");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("if (found");
            String _name_67 = be.getName();
            String _firstUpper_37 = StringExtensions.toFirstUpper(_name_67);
            _builder.append(_firstUpper_37, "\t\t");
            _builder.append(" == null)");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("throw new Exception(\"");
            String _name_68 = be.getName();
            String _firstUpper_38 = StringExtensions.toFirstUpper(_name_68);
            _builder.append(_firstUpper_38, "\t\t\t");
            _builder.append(" Doesn\'t Exists\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("else {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("TypedQuery<");
            String _name_69 = be.getName();
            String _firstUpper_39 = StringExtensions.toFirstUpper(_name_69);
            _builder.append(_firstUpper_39, "\t\t\t");
            _builder.append("> query = em.createNamedQuery(");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("\"");
            String _name_70 = be.getName();
            String _lowerCase_24 = _name_70.toLowerCase();
            _builder.append(_lowerCase_24, "\t\t\t\t");
            _builder.append(".delete");
            String _name_71 = be.getName();
            String _firstUpper_40 = StringExtensions.toFirstUpper(_name_71);
            _builder.append(_firstUpper_40, "\t\t\t\t");
            _builder.append("\", ");
            String _name_72 = be.getName();
            String _firstUpper_41 = StringExtensions.toFirstUpper(_name_72);
            _builder.append(_firstUpper_41, "\t\t\t\t");
            _builder.append(".class);");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("query.setParameter(\"id\", ");
            String _name_73 = be.getName();
            String _lowerCase_25 = _name_73.toLowerCase();
            _builder.append(_lowerCase_25, "\t\t\t");
            _builder.append(".get");
            String _name_74 = id_2.getName();
            String _firstUpper_42 = StringExtensions.toFirstUpper(_name_74);
            _builder.append(_firstUpper_42, "\t\t\t");
            _builder.append("());");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("try {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("query.executeUpdate();");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("return true;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("} catch (NoResultException e) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("throw new Exception(\"");
            String _name_75 = be.getName();
            String _firstUpper_43 = StringExtensions.toFirstUpper(_name_75);
            _builder.append(_firstUpper_43, "\t\t\t\t");
            _builder.append(" Cannot Be Found\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("} catch (DatabaseException e) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("throw new Exception(\"");
            String _name_76 = be.getName();
            String _firstUpper_44 = StringExtensions.toFirstUpper(_name_76);
            _builder.append(_firstUpper_44, "\t\t\t\t");
            _builder.append(" With Associated Data Cannot Be Deleted\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
        {
          if ((contract_1 instanceof ListAll)) {
            _builder.append("\t");
            String _extendContribution_8 = DomainCodeGenerator.extendContribution("_r_1", DomainCodeGenerator.CONTRIBUTE_TO_BIMPL, contract_1, be);
            _builder.append(_extendContribution_8, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((contract_1 instanceof AddElement)) {
            _builder.append("\t");
            Multiple _association_1 = ((ContractElements) contract_1).getAssociation();
            final BusinessEntity relatedEntity_1 = _association_1.getEntity();
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            Attribute _iD_1 = DomainCodeGenerator.getID(be);
            DataType _dataType = _iD_1.getDataType();
            final String type = _dataType.getLiteral();
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("public boolean ");
            String _name_77 = ((ContractElements) contract_1).getName();
            _builder.append(_name_77, "\t");
            _builder.append("(");
            String _name_78 = relatedEntity_1.getName();
            _builder.append(_name_78, "\t");
            _builder.append("TO ");
            String _name_79 = relatedEntity_1.getName();
            String _lowerCase_26 = _name_79.toLowerCase();
            _builder.append(_lowerCase_26, "\t");
            _builder.append(", ");
            String _type = DomainCodeGenerator.getType(type);
            _builder.append(_type, "\t");
            _builder.append(" ");
            String _name_80 = be.getName();
            String _lowerCase_27 = _name_80.toLowerCase();
            _builder.append(_lowerCase_27, "\t");
            Attribute _iD_2 = DomainCodeGenerator.getID(be);
            String _name_81 = _iD_2.getName();
            String _firstUpper_45 = StringExtensions.toFirstUpper(_name_81);
            _builder.append(_firstUpper_45, "\t");
            _builder.append(") throws Exception {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            String _extendContribution_9 = DomainCodeGenerator.extendContribution("_r_2_10", DomainCodeGenerator.CONTRIBUTE_TO_BIMPL, contract_1, be, relatedEntity_1, null, null, null, null, Integer.valueOf(0));
            _builder.append(_extendContribution_9, "\t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            String _name_82 = be.getName();
            String _firstUpper_46 = StringExtensions.toFirstUpper(_name_82);
            _builder.append(_firstUpper_46, "\t\t");
            _builder.append(" ");
            String _name_83 = be.getName();
            String _lowerCase_28 = _name_83.toLowerCase();
            _builder.append(_lowerCase_28, "\t\t");
            _builder.append(" = em.find(");
            String _name_84 = be.getName();
            String _firstUpper_47 = StringExtensions.toFirstUpper(_name_84);
            _builder.append(_firstUpper_47, "\t\t");
            _builder.append(".class, ");
            String _name_85 = be.getName();
            String _lowerCase_29 = _name_85.toLowerCase();
            _builder.append(_lowerCase_29, "\t\t");
            Attribute _iD_3 = DomainCodeGenerator.getID(be);
            String _name_86 = _iD_3.getName();
            String _firstUpper_48 = StringExtensions.toFirstUpper(_name_86);
            _builder.append(_firstUpper_48, "\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            String _name_87 = relatedEntity_1.getName();
            String _firstUpper_49 = StringExtensions.toFirstUpper(_name_87);
            _builder.append(_firstUpper_49, "\t\t");
            String _name_88 = be.getName();
            String _firstUpper_50 = StringExtensions.toFirstUpper(_name_88);
            _builder.append(_firstUpper_50, "\t\t");
            _builder.append("PK pk = new ");
            String _name_89 = relatedEntity_1.getName();
            String _firstUpper_51 = StringExtensions.toFirstUpper(_name_89);
            _builder.append(_firstUpper_51, "\t\t");
            String _name_90 = be.getName();
            String _firstUpper_52 = StringExtensions.toFirstUpper(_name_90);
            _builder.append(_firstUpper_52, "\t\t");
            _builder.append("PK();");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("pk.set");
            Attribute _iD_4 = DomainCodeGenerator.getID(be);
            String _name_91 = _iD_4.getName();
            String _firstUpper_53 = StringExtensions.toFirstUpper(_name_91);
            _builder.append(_firstUpper_53, "\t\t");
            _builder.append("(");
            String _name_92 = be.getName();
            String _lowerCase_30 = _name_92.toLowerCase();
            _builder.append(_lowerCase_30, "\t\t");
            Attribute _iD_5 = DomainCodeGenerator.getID(be);
            String _name_93 = _iD_5.getName();
            String _firstUpper_54 = StringExtensions.toFirstUpper(_name_93);
            _builder.append(_firstUpper_54, "\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("pk.set");
            Attribute _iD_6 = DomainCodeGenerator.getID(relatedEntity_1);
            String _name_94 = _iD_6.getName();
            String _firstUpper_55 = StringExtensions.toFirstUpper(_name_94);
            _builder.append(_firstUpper_55, "\t\t");
            _builder.append("(");
            String _name_95 = relatedEntity_1.getName();
            String _lowerCase_31 = _name_95.toLowerCase();
            _builder.append(_lowerCase_31, "\t\t");
            _builder.append(".get");
            Attribute _iD_7 = DomainCodeGenerator.getID(relatedEntity_1);
            String _name_96 = _iD_7.getName();
            String _firstUpper_56 = StringExtensions.toFirstUpper(_name_96);
            _builder.append(_firstUpper_56, "\t\t");
            _builder.append("());");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            String _name_97 = relatedEntity_1.getName();
            String _firstUpper_57 = StringExtensions.toFirstUpper(_name_97);
            _builder.append(_firstUpper_57, "\t\t");
            String _name_98 = be.getName();
            String _firstUpper_58 = StringExtensions.toFirstUpper(_name_98);
            _builder.append(_firstUpper_58, "\t\t");
            _builder.append(" pU = em.find(");
            String _name_99 = relatedEntity_1.getName();
            String _firstUpper_59 = StringExtensions.toFirstUpper(_name_99);
            _builder.append(_firstUpper_59, "\t\t");
            String _name_100 = be.getName();
            String _firstUpper_60 = StringExtensions.toFirstUpper(_name_100);
            _builder.append(_firstUpper_60, "\t\t");
            _builder.append(".class, pk);");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("if (pU == null) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("pU = new ");
            String _name_101 = relatedEntity_1.getName();
            String _firstUpper_61 = StringExtensions.toFirstUpper(_name_101);
            _builder.append(_firstUpper_61, "\t\t\t");
            String _name_102 = be.getName();
            String _firstUpper_62 = StringExtensions.toFirstUpper(_name_102);
            _builder.append(_firstUpper_62, "\t\t\t");
            _builder.append("();");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("pU.setId(pk);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("pU.set");
            String _name_103 = be.getName();
            String _firstUpper_63 = StringExtensions.toFirstUpper(_name_103);
            _builder.append(_firstUpper_63, "\t\t\t");
            _builder.append("Bean(");
            String _name_104 = be.getName();
            String _lowerCase_32 = _name_104.toLowerCase();
            _builder.append(_lowerCase_32, "\t\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t");
            String _name_105 = be.getName();
            String _lowerCase_33 = _name_105.toLowerCase();
            _builder.append(_lowerCase_33, "\t\t\t");
            _builder.append(".get");
            String _name_106 = relatedEntity_1.getName();
            String _firstUpper_64 = StringExtensions.toFirstUpper(_name_106);
            _builder.append(_firstUpper_64, "\t\t\t");
            String _name_107 = be.getName();
            String _firstUpper_65 = StringExtensions.toFirstUpper(_name_107);
            _builder.append(_firstUpper_65, "\t\t\t");
            _builder.append("().add(pU);");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("try {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("em.merge(");
            String _name_108 = be.getName();
            String _lowerCase_34 = _name_108.toLowerCase();
            _builder.append(_lowerCase_34, "\t\t\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("em.flush();");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("return true;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("} catch (DatabaseException e) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("return false;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("} else");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("throw new Exception(\"");
            String _name_109 = relatedEntity_1.getName();
            String _firstUpper_66 = StringExtensions.toFirstUpper(_name_109);
            _builder.append(_firstUpper_66, "\t\t\t");
            _builder.append(" alredy exists in ");
            String _name_110 = be.getName();
            String _lowerCase_35 = _name_110.toLowerCase();
            _builder.append(_lowerCase_35, "\t\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
        {
          if ((contract_1 instanceof DeleteElement)) {
            _builder.append("\t");
            Multiple _association_2 = ((ContractElements) contract_1).getAssociation();
            final BusinessEntity relatedEntity_2 = _association_2.getEntity();
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            Attribute _iD_8 = DomainCodeGenerator.getID(be);
            DataType _dataType_1 = _iD_8.getDataType();
            final String type_1 = _dataType_1.getLiteral();
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("public boolean ");
            String _name_111 = ((ContractElements) contract_1).getName();
            _builder.append(_name_111, "\t");
            _builder.append("(");
            String _name_112 = relatedEntity_2.getName();
            _builder.append(_name_112, "\t");
            _builder.append("TO ");
            String _name_113 = relatedEntity_2.getName();
            String _lowerCase_36 = _name_113.toLowerCase();
            _builder.append(_lowerCase_36, "\t");
            _builder.append(", ");
            String _type_1 = DomainCodeGenerator.getType(type_1);
            _builder.append(_type_1, "\t");
            _builder.append(" ");
            String _name_114 = be.getName();
            String _lowerCase_37 = _name_114.toLowerCase();
            _builder.append(_lowerCase_37, "\t");
            Attribute _iD_9 = DomainCodeGenerator.getID(be);
            String _name_115 = _iD_9.getName();
            String _firstUpper_67 = StringExtensions.toFirstUpper(_name_115);
            _builder.append(_firstUpper_67, "\t");
            _builder.append(") throws Exception {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            String _extendContribution_10 = DomainCodeGenerator.extendContribution("_r_2_10", DomainCodeGenerator.CONTRIBUTE_TO_BIMPL, contract_1, be, relatedEntity_2, null, null, null, null, Integer.valueOf(0));
            _builder.append(_extendContribution_10, "\t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            String _name_116 = be.getName();
            String _firstUpper_68 = StringExtensions.toFirstUpper(_name_116);
            _builder.append(_firstUpper_68, "\t\t");
            _builder.append(" ");
            String _name_117 = be.getName();
            String _lowerCase_38 = _name_117.toLowerCase();
            _builder.append(_lowerCase_38, "\t\t");
            _builder.append(" = em.find(");
            String _name_118 = be.getName();
            String _firstUpper_69 = StringExtensions.toFirstUpper(_name_118);
            _builder.append(_firstUpper_69, "\t\t");
            _builder.append(".class, ");
            String _name_119 = be.getName();
            String _lowerCase_39 = _name_119.toLowerCase();
            _builder.append(_lowerCase_39, "\t\t");
            Attribute _iD_10 = DomainCodeGenerator.getID(be);
            String _name_120 = _iD_10.getName();
            String _firstUpper_70 = StringExtensions.toFirstUpper(_name_120);
            _builder.append(_firstUpper_70, "\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            String _name_121 = relatedEntity_2.getName();
            String _firstUpper_71 = StringExtensions.toFirstUpper(_name_121);
            _builder.append(_firstUpper_71, "\t\t");
            String _name_122 = be.getName();
            String _firstUpper_72 = StringExtensions.toFirstUpper(_name_122);
            _builder.append(_firstUpper_72, "\t\t");
            _builder.append("PK pk = new ");
            String _name_123 = relatedEntity_2.getName();
            String _firstUpper_73 = StringExtensions.toFirstUpper(_name_123);
            _builder.append(_firstUpper_73, "\t\t");
            String _name_124 = be.getName();
            String _firstUpper_74 = StringExtensions.toFirstUpper(_name_124);
            _builder.append(_firstUpper_74, "\t\t");
            _builder.append("PK();");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("pk.set");
            Attribute _iD_11 = DomainCodeGenerator.getID(be);
            String _name_125 = _iD_11.getName();
            String _firstUpper_75 = StringExtensions.toFirstUpper(_name_125);
            _builder.append(_firstUpper_75, "\t\t");
            _builder.append("(");
            String _name_126 = be.getName();
            String _lowerCase_40 = _name_126.toLowerCase();
            _builder.append(_lowerCase_40, "\t\t");
            Attribute _iD_12 = DomainCodeGenerator.getID(be);
            String _name_127 = _iD_12.getName();
            String _firstUpper_76 = StringExtensions.toFirstUpper(_name_127);
            _builder.append(_firstUpper_76, "\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("pk.set");
            Attribute _iD_13 = DomainCodeGenerator.getID(relatedEntity_2);
            String _name_128 = _iD_13.getName();
            String _firstUpper_77 = StringExtensions.toFirstUpper(_name_128);
            _builder.append(_firstUpper_77, "\t\t");
            _builder.append("(");
            String _name_129 = relatedEntity_2.getName();
            String _lowerCase_41 = _name_129.toLowerCase();
            _builder.append(_lowerCase_41, "\t\t");
            _builder.append(".get");
            Attribute _iD_14 = DomainCodeGenerator.getID(relatedEntity_2);
            String _name_130 = _iD_14.getName();
            String _firstUpper_78 = StringExtensions.toFirstUpper(_name_130);
            _builder.append(_firstUpper_78, "\t\t");
            _builder.append("());");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            String _name_131 = relatedEntity_2.getName();
            String _firstUpper_79 = StringExtensions.toFirstUpper(_name_131);
            _builder.append(_firstUpper_79, "\t\t");
            String _name_132 = be.getName();
            String _firstUpper_80 = StringExtensions.toFirstUpper(_name_132);
            _builder.append(_firstUpper_80, "\t\t");
            _builder.append(" pU = em.find(");
            String _name_133 = relatedEntity_2.getName();
            String _firstUpper_81 = StringExtensions.toFirstUpper(_name_133);
            _builder.append(_firstUpper_81, "\t\t");
            String _name_134 = be.getName();
            String _firstUpper_82 = StringExtensions.toFirstUpper(_name_134);
            _builder.append(_firstUpper_82, "\t\t");
            _builder.append(".class, pk);");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            String _name_135 = be.getName();
            String _lowerCase_42 = _name_135.toLowerCase();
            _builder.append(_lowerCase_42, "\t\t");
            _builder.append(".get");
            String _name_136 = relatedEntity_2.getName();
            String _firstUpper_83 = StringExtensions.toFirstUpper(_name_136);
            _builder.append(_firstUpper_83, "\t\t");
            String _name_137 = be.getName();
            String _firstUpper_84 = StringExtensions.toFirstUpper(_name_137);
            _builder.append(_firstUpper_84, "\t\t");
            _builder.append("().remove(pU);");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("try {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("em.merge(");
            String _name_138 = be.getName();
            String _lowerCase_43 = _name_138.toLowerCase();
            _builder.append(_lowerCase_43, "\t\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("em.flush();");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("return true;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("} catch (DatabaseException e) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("return false;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    {
      EList<Association> _associations = be.getAssociations();
      for(final Association association_1 : _associations) {
        {
          if ((association_1 instanceof Simple)) {
            _builder.append("\t");
            final BusinessEntity relatedEntity_3 = ((Simple)association_1).getRelatedEntity();
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            Attribute _iD_15 = DomainCodeGenerator.getID(be);
            DataType _dataType_2 = _iD_15.getDataType();
            final String type_2 = _dataType_2.getLiteral();
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("public boolean set");
            String _name_139 = be.getName();
            String _firstUpper_85 = StringExtensions.toFirstUpper(_name_139);
            _builder.append(_firstUpper_85, "\t");
            String _name_140 = ((Simple)association_1).getName();
            String _firstUpper_86 = StringExtensions.toFirstUpper(_name_140);
            _builder.append(_firstUpper_86, "\t");
            _builder.append("(");
            String _name_141 = relatedEntity_3.getName();
            _builder.append(_name_141, "\t");
            _builder.append("TO ");
            String _name_142 = ((Simple)association_1).getName();
            String _lowerCase_44 = _name_142.toLowerCase();
            _builder.append(_lowerCase_44, "\t");
            _builder.append(", ");
            String _type_2 = DomainCodeGenerator.getType(type_2);
            _builder.append(_type_2, "\t");
            _builder.append(" ");
            String _name_143 = be.getName();
            String _lowerCase_45 = _name_143.toLowerCase();
            _builder.append(_lowerCase_45, "\t");
            Attribute _iD_16 = DomainCodeGenerator.getID(be);
            String _name_144 = _iD_16.getName();
            String _firstUpper_87 = StringExtensions.toFirstUpper(_name_144);
            _builder.append(_firstUpper_87, "\t");
            _builder.append(") throws Exception {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            String _name_145 = ((Simple)association_1).getName();
            String _extendContribution_11 = DomainCodeGenerator.extendContribution("_r_2_10", DomainCodeGenerator.CONTRIBUTE_TO_BIMPL, null, be, relatedEntity_3, _name_145, association_1, null, null, Integer.valueOf(0));
            _builder.append(_extendContribution_11, "\t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            String _name_146 = be.getName();
            String _firstUpper_88 = StringExtensions.toFirstUpper(_name_146);
            _builder.append(_firstUpper_88, "\t\t");
            _builder.append(" ");
            String _name_147 = be.getName();
            String _lowerCase_46 = _name_147.toLowerCase();
            _builder.append(_lowerCase_46, "\t\t");
            _builder.append(" = em.find(");
            String _name_148 = be.getName();
            String _firstUpper_89 = StringExtensions.toFirstUpper(_name_148);
            _builder.append(_firstUpper_89, "\t\t");
            _builder.append(".class, ");
            String _name_149 = be.getName();
            String _lowerCase_47 = _name_149.toLowerCase();
            _builder.append(_lowerCase_47, "\t\t");
            Attribute _iD_17 = DomainCodeGenerator.getID(be);
            String _name_150 = _iD_17.getName();
            String _firstUpper_90 = StringExtensions.toFirstUpper(_name_150);
            _builder.append(_firstUpper_90, "\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            String _name_151 = be.getName();
            String _lowerCase_48 = _name_151.toLowerCase();
            _builder.append(_lowerCase_48, "\t\t");
            _builder.append(".set");
            String _name_152 = ((Simple)association_1).getName();
            String _firstUpper_91 = StringExtensions.toFirstUpper(_name_152);
            _builder.append(_firstUpper_91, "\t\t");
            _builder.append("(");
            String _name_153 = ((Simple)association_1).getName();
            String _lowerCase_49 = _name_153.toLowerCase();
            _builder.append(_lowerCase_49, "\t\t");
            _builder.append(".get");
            Attribute _iD_18 = DomainCodeGenerator.getID(relatedEntity_3);
            String _name_154 = _iD_18.getName();
            String _firstUpper_92 = StringExtensions.toFirstUpper(_name_154);
            _builder.append(_firstUpper_92, "\t\t");
            _builder.append("());");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("try {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("em.merge(");
            String _name_155 = be.getName();
            String _lowerCase_50 = _name_155.toLowerCase();
            _builder.append(_lowerCase_50, "\t\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("em.flush();");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("return true;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("} catch (DatabaseException e) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("return false;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    {
      List<Association> _detailSimpleAssociations = DomainCodeGenerator.getDetailSimpleAssociations(be, associations);
      for(final Association association_2 : _detailSimpleAssociations) {
        _builder.append("\t");
        EObject _eContainer_1 = association_2.eContainer();
        final BusinessEntity container_1 = ((BusinessEntity) _eContainer_1);
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        Attribute _iD_19 = DomainCodeGenerator.getID(container_1);
        DataType _dataType_3 = _iD_19.getDataType();
        final String type_3 = _dataType_3.getLiteral();
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("public ");
        String _name_156 = be.getName();
        _builder.append(_name_156, "\t");
        _builder.append("TO get");
        String _name_157 = container_1.getName();
        String _firstUpper_93 = StringExtensions.toFirstUpper(_name_157);
        _builder.append(_firstUpper_93, "\t");
        String _name_158 = association_2.getName();
        String _firstUpper_94 = StringExtensions.toFirstUpper(_name_158);
        _builder.append(_firstUpper_94, "\t");
        _builder.append("(");
        String _type_3 = DomainCodeGenerator.getType(type_3);
        _builder.append(_type_3, "\t");
        _builder.append(" ");
        String _name_159 = container_1.getName();
        String _lowerCase_51 = _name_159.toLowerCase();
        _builder.append(_lowerCase_51, "\t");
        Attribute _iD_20 = DomainCodeGenerator.getID(container_1);
        String _name_160 = _iD_20.getName();
        String _firstUpper_95 = StringExtensions.toFirstUpper(_name_160);
        _builder.append(_firstUpper_95, "\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        String _extendContribution_12 = DomainCodeGenerator.extendContribution("_r_2_10", DomainCodeGenerator.CONTRIBUTE_TO_BIMPL, null, null, container_1, null, null, Integer.valueOf(1), null, Integer.valueOf(0));
        _builder.append(_extendContribution_12, "\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return ");
        String _name_161 = be.getName();
        String _lowerCase_52 = _name_161.toLowerCase();
        _builder.append(_lowerCase_52, "\t\t");
        _builder.append("DAO.get");
        String _name_162 = container_1.getName();
        String _firstUpper_96 = StringExtensions.toFirstUpper(_name_162);
        _builder.append(_firstUpper_96, "\t\t");
        String _name_163 = association_2.getName();
        String _firstUpper_97 = StringExtensions.toFirstUpper(_name_163);
        _builder.append(_firstUpper_97, "\t\t");
        _builder.append("(");
        String _name_164 = container_1.getName();
        String _lowerCase_53 = _name_164.toLowerCase();
        _builder.append(_lowerCase_53, "\t\t");
        Attribute _iD_21 = DomainCodeGenerator.getID(container_1);
        String _name_165 = _iD_21.getName();
        String _firstUpper_98 = StringExtensions.toFirstUpper(_name_165);
        _builder.append(_firstUpper_98, "\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      List<Association> _detailMultipleAssociations_5 = DomainCodeGenerator.getDetailMultipleAssociations(be, associations);
      for(final Association association_3 : _detailMultipleAssociations_5) {
        _builder.append("\t");
        EObject _eContainer_2 = association_3.eContainer();
        final BusinessEntity container_2 = ((BusinessEntity) _eContainer_2);
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        Attribute _iD_22 = DomainCodeGenerator.getID(container_2);
        DataType _dataType_4 = _iD_22.getDataType();
        final String type_4 = _dataType_4.getLiteral();
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("public List<");
        String _name_166 = be.getName();
        String _firstUpper_99 = StringExtensions.toFirstUpper(_name_166);
        _builder.append(_firstUpper_99, "\t");
        _builder.append("TO> get");
        String _name_167 = be.getName();
        String _firstUpper_100 = StringExtensions.toFirstUpper(_name_167);
        _builder.append(_firstUpper_100, "\t");
        _builder.append("From");
        String _name_168 = container_2.getName();
        String _firstUpper_101 = StringExtensions.toFirstUpper(_name_168);
        _builder.append(_firstUpper_101, "\t");
        _builder.append("(");
        String _type_4 = DomainCodeGenerator.getType(type_4);
        _builder.append(_type_4, "\t");
        _builder.append(" ");
        String _name_169 = container_2.getName();
        String _lowerCase_54 = _name_169.toLowerCase();
        _builder.append(_lowerCase_54, "\t");
        Attribute _iD_23 = DomainCodeGenerator.getID(container_2);
        String _name_170 = _iD_23.getName();
        String _firstUpper_102 = StringExtensions.toFirstUpper(_name_170);
        _builder.append(_firstUpper_102, "\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        {
          boolean _isDetail_5 = DomainCodeGenerator.isDetail(be);
          boolean _not_10 = (!_isDetail_5);
          if (_not_10) {
            _builder.append("\t");
            String _extendContribution_13 = DomainCodeGenerator.extendContribution("_r_2_10", DomainCodeGenerator.CONTRIBUTE_TO_BIMPL, null, null, container_2, null, null, Integer.valueOf(1), null, Integer.valueOf(0));
            _builder.append(_extendContribution_13, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("return ");
            String _name_171 = be.getName();
            String _lowerCase_55 = _name_171.toLowerCase();
            _builder.append(_lowerCase_55, "\t");
            _builder.append("DAO.get");
            String _name_172 = be.getName();
            String _firstUpper_103 = StringExtensions.toFirstUpper(_name_172);
            _builder.append(_firstUpper_103, "\t");
            _builder.append("From");
            String _name_173 = container_2.getName();
            String _firstUpper_104 = StringExtensions.toFirstUpper(_name_173);
            _builder.append(_firstUpper_104, "\t");
            _builder.append("(");
            String _name_174 = container_2.getName();
            String _lowerCase_56 = _name_174.toLowerCase();
            _builder.append(_lowerCase_56, "\t");
            Attribute _iD_24 = DomainCodeGenerator.getID(container_2);
            String _name_175 = _iD_24.getName();
            String _firstUpper_105 = StringExtensions.toFirstUpper(_name_175);
            _builder.append(_firstUpper_105, "\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t");
            _builder.append("List<");
            String _name_176 = be.getName();
            String _firstUpper_106 = StringExtensions.toFirstUpper(_name_176);
            _builder.append(_firstUpper_106, "\t");
            _builder.append("TO> to");
            String _name_177 = be.getName();
            String _firstUpper_107 = StringExtensions.toFirstUpper(_name_177);
            _builder.append(_firstUpper_107, "\t");
            _builder.append("s = new ArrayList<>();");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("TypedQuery<");
            String _name_178 = be.getName();
            String _firstUpper_108 = StringExtensions.toFirstUpper(_name_178);
            _builder.append(_firstUpper_108, "\t");
            _builder.append("> query = em.createNamedQuery(\"");
            String _name_179 = be.getName();
            String _lowerCase_57 = _name_179.toLowerCase();
            _builder.append(_lowerCase_57, "\t");
            _builder.append(".get");
            String _name_180 = container_2.getName();
            String _firstUpper_109 = StringExtensions.toFirstUpper(_name_180);
            _builder.append(_firstUpper_109, "\t");
            String _name_181 = be.getName();
            String _firstUpper_110 = StringExtensions.toFirstUpper(_name_181);
            _builder.append(_firstUpper_110, "\t");
            _builder.append("\",");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t");
            String _name_182 = be.getName();
            String _firstUpper_111 = StringExtensions.toFirstUpper(_name_182);
            _builder.append(_firstUpper_111, "\t\t\t");
            _builder.append(".class);");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("query.setParameter(\"id\", ");
            String _name_183 = container_2.getName();
            String _lowerCase_58 = _name_183.toLowerCase();
            _builder.append(_lowerCase_58, "\t");
            Attribute _iD_25 = DomainCodeGenerator.getID(container_2);
            String _name_184 = _iD_25.getName();
            String _firstUpper_112 = StringExtensions.toFirstUpper(_name_184);
            _builder.append(_firstUpper_112, "\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("try {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("List<");
            String _name_185 = be.getName();
            String _firstUpper_113 = StringExtensions.toFirstUpper(_name_185);
            _builder.append(_firstUpper_113, "\t\t");
            _builder.append("> found");
            String _name_186 = be.getName();
            String _firstUpper_114 = StringExtensions.toFirstUpper(_name_186);
            _builder.append(_firstUpper_114, "\t\t");
            _builder.append("s = query.getResultList();");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("for (");
            String _name_187 = be.getName();
            String _firstUpper_115 = StringExtensions.toFirstUpper(_name_187);
            _builder.append(_firstUpper_115, "\t\t");
            _builder.append(" ");
            String _name_188 = be.getName();
            String _lowerCase_59 = _name_188.toLowerCase();
            _builder.append(_lowerCase_59, "\t\t");
            _builder.append(" : found");
            String _name_189 = be.getName();
            String _firstUpper_116 = StringExtensions.toFirstUpper(_name_189);
            _builder.append(_firstUpper_116, "\t\t");
            _builder.append("s) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t");
            String _extendContribution_14 = DomainCodeGenerator.extendContribution("_r_2_10", DomainCodeGenerator.CONTRIBUTE_TO_BIMPL, null, be, null, null, null, null, null, Integer.valueOf(1));
            _builder.append(_extendContribution_14, "\t\t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("to");
            String _name_190 = be.getName();
            String _firstUpper_117 = StringExtensions.toFirstUpper(_name_190);
            _builder.append(_firstUpper_117, "\t\t\t");
            _builder.append("s.add(");
            String _name_191 = be.getName();
            String _lowerCase_60 = _name_191.toLowerCase();
            _builder.append(_lowerCase_60, "\t\t\t");
            _builder.append(".toTO());");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("return to");
            String _name_192 = be.getName();
            String _firstUpper_118 = StringExtensions.toFirstUpper(_name_192);
            _builder.append(_firstUpper_118, "\t\t");
            _builder.append("s;");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("} catch (NoResultException e) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("return null;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      boolean _isIsAuthenticable_2 = be.isIsAuthenticable();
      if (_isIsAuthenticable_2) {
        _builder.append("\t");
        Attribute _iD_26 = DomainCodeGenerator.getID(be);
        DataType _dataType_5 = _iD_26.getDataType();
        final String type_5 = _dataType_5.getLiteral();
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("public ");
        String _name_193 = be.getName();
        String _firstUpper_119 = StringExtensions.toFirstUpper(_name_193);
        _builder.append(_firstUpper_119, "\t");
        _builder.append("TO authenticate(");
        String _type_5 = DomainCodeGenerator.getType(type_5);
        _builder.append(_type_5, "\t");
        _builder.append(" ");
        String _name_194 = be.getName();
        String _lowerCase_61 = _name_194.toLowerCase();
        _builder.append(_lowerCase_61, "\t");
        Attribute _iD_27 = DomainCodeGenerator.getID(be);
        String _name_195 = _iD_27.getName();
        String _firstUpper_120 = StringExtensions.toFirstUpper(_name_195);
        _builder.append(_firstUpper_120, "\t");
        _builder.append(", String password) throws Exception {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        String _extendContribution_15 = DomainCodeGenerator.extendContribution("_r_2_10", DomainCodeGenerator.CONTRIBUTE_TO_BIMPL, null, be, null, null, null, null, Boolean.valueOf(true), Integer.valueOf(0));
        _builder.append(_extendContribution_15, "\t\t");
        _builder.newLineIfNotEmpty();
        {
          boolean _and_11 = false;
          boolean _notEquals_8 = (!Objects.equal(authContribution, null));
          if (!_notEquals_8) {
            _and_11 = false;
          } else {
            boolean _equals_4 = authContribution.equals("");
            boolean _not_11 = (!_equals_4);
            _and_11 = _not_11;
          }
          if (_and_11) {
            _builder.append("\t");
            _builder.append("\t");
            _builder.append(authContribution, "\t\t");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            String _extendContribution_16 = DomainCodeGenerator.extendContribution("_r_2_11_15_17", DomainCodeGenerator.CONTRIBUTE_TO_GENERATION, fsa, packageName, be);
            _builder.append(_extendContribution_16, "\t\t");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("User found");
            String _name_196 = be.getName();
            String _firstUpper_121 = StringExtensions.toFirstUpper(_name_196);
            _builder.append(_firstUpper_121, "\t\t");
            _builder.append(" = em.find(");
            String _name_197 = be.getName();
            String _firstUpper_122 = StringExtensions.toFirstUpper(_name_197);
            _builder.append(_firstUpper_122, "\t\t");
            _builder.append(".class, ");
            String _name_198 = be.getName();
            String _lowerCase_62 = _name_198.toLowerCase();
            _builder.append(_lowerCase_62, "\t\t");
            Attribute _iD_28 = DomainCodeGenerator.getID(be);
            String _name_199 = _iD_28.getName();
            String _firstUpper_123 = StringExtensions.toFirstUpper(_name_199);
            _builder.append(_firstUpper_123, "\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("if (found");
            String _name_200 = be.getName();
            String _firstUpper_124 = StringExtensions.toFirstUpper(_name_200);
            _builder.append(_firstUpper_124, "\t\t");
            _builder.append(" != null) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("if (found");
            String _name_201 = be.getName();
            String _firstUpper_125 = StringExtensions.toFirstUpper(_name_201);
            _builder.append(_firstUpper_125, "\t\t\t");
            _builder.append(".getPassword().equals(password))");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("return found");
            String _name_202 = be.getName();
            String _firstUpper_126 = StringExtensions.toFirstUpper(_name_202);
            _builder.append(_firstUpper_126, "\t\t\t\t");
            _builder.append(".toTO();");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("else");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("throw new Exception(\"Incorrect password\");");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("} else");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("throw new Exception(\"");
            String _name_203 = be.getName();
            String _firstUpper_127 = StringExtensions.toFirstUpper(_name_203);
            _builder.append(_firstUpper_127, "\t\t\t");
            _builder.append(" doesn\'t exists\");");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
