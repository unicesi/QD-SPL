package co.shift.templates.web.contributed.syncTE;

import domainmetamodel.Attribute;
import domainmetamodel.BusinessEntity;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class ListUpdaterTemplate {
  public static CharSequence generate(final BusinessEntity be, final String packageName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package co.shift.");
    String _lowerCase = packageName.toLowerCase();
    _builder.append(_lowerCase, "");
    _builder.append(".web.ext.");
    String _name = be.getName();
    String _lowerCase_1 = _name.toLowerCase();
    _builder.append(_lowerCase_1, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import co.shift.");
    String _lowerCase_2 = packageName.toLowerCase();
    _builder.append(_lowerCase_2, "");
    _builder.append(".to.");
    String _name_1 = be.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name_1);
    _builder.append(_firstUpper, "");
    _builder.append("TO;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public class ");
    String _name_2 = be.getName();
    String _firstUpper_1 = StringExtensions.toFirstUpper(_name_2);
    _builder.append(_firstUpper_1, "");
    _builder.append("ListUpdater extends Thread{");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ");
    String _name_3 = be.getName();
    String _firstUpper_2 = StringExtensions.toFirstUpper(_name_3);
    _builder.append(_firstUpper_2, "\t");
    _builder.append("Form pF;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private List<");
    String _name_4 = be.getName();
    String _firstUpper_3 = StringExtensions.toFirstUpper(_name_4);
    _builder.append(_firstUpper_3, "\t");
    _builder.append("TO> ");
    String _name_5 = be.getName();
    String _lowerCase_3 = _name_5.toLowerCase();
    _builder.append(_lowerCase_3, "\t");
    _builder.append("s;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _name_6 = be.getName();
    String _firstUpper_4 = StringExtensions.toFirstUpper(_name_6);
    _builder.append(_firstUpper_4, "\t");
    _builder.append("ListUpdater(");
    String _name_7 = be.getName();
    String _firstUpper_5 = StringExtensions.toFirstUpper(_name_7);
    _builder.append(_firstUpper_5, "\t");
    _builder.append("Form pF, List<");
    String _name_8 = be.getName();
    String _firstUpper_6 = StringExtensions.toFirstUpper(_name_8);
    _builder.append(_firstUpper_6, "\t");
    _builder.append("TO> ");
    String _name_9 = be.getName();
    String _lowerCase_4 = _name_9.toLowerCase();
    _builder.append(_lowerCase_4, "\t");
    _builder.append("s){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.pF = pF;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.");
    String _name_10 = be.getName();
    String _lowerCase_5 = _name_10.toLowerCase();
    _builder.append(_lowerCase_5, "\t\t");
    _builder.append("s = ");
    String _name_11 = be.getName();
    String _lowerCase_6 = _name_11.toLowerCase();
    _builder.append(_lowerCase_6, "\t\t");
    _builder.append("s;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void run() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (");
    String _name_12 = be.getName();
    String _lowerCase_7 = _name_12.toLowerCase();
    _builder.append(_lowerCase_7, "\t\t");
    _builder.append("s.size() > 0) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("for (");
    String _name_13 = be.getName();
    String _firstUpper_7 = StringExtensions.toFirstUpper(_name_13);
    _builder.append(_firstUpper_7, "\t\t\t");
    _builder.append("TO to : ");
    String _name_14 = be.getName();
    String _lowerCase_8 = _name_14.toLowerCase();
    _builder.append(_lowerCase_8, "\t\t\t");
    _builder.append("s) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("Object data[] = { ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    EList<Attribute> _attributes = be.getAttributes();
    int size = _attributes.size();
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    int c = 0;
    _builder.newLineIfNotEmpty();
    {
      EList<Attribute> _attributes_1 = be.getAttributes();
      for(final Attribute a : _attributes_1) {
        {
          if ((c < (size - 1))) {
            _builder.append("\t\t\t\t\t");
            _builder.append("to.get");
            String _name_15 = a.getName();
            String _firstUpper_8 = StringExtensions.toFirstUpper(_name_15);
            _builder.append(_firstUpper_8, "\t\t\t\t\t");
            _builder.append("(), ");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t\t\t\t\t");
            _builder.append("to.get");
            String _name_16 = a.getName();
            String _firstUpper_9 = StringExtensions.toFirstUpper(_name_16);
            _builder.append(_firstUpper_9, "\t\t\t\t\t");
            _builder.append("()");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t\t\t\t\t");
        int sd = c++;
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t\t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("pF.getTable_1().addItem(data, to);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
