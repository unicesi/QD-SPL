package co.shift.templates.web.basic;

import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class GlobalJNDITemplate {
  public static CharSequence generate(final String packageName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package co.shift.");
    String _lowerCase = packageName.toLowerCase();
    _builder.append(_lowerCase, "");
    _builder.append(".util.beanlocator;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.util.Properties;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.ejb.Singleton;");
    _builder.newLine();
    _builder.append("import javax.ejb.Stateful;");
    _builder.newLine();
    _builder.append("import javax.ejb.Stateless;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class GlobalJNDIName {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private StringBuilder builder;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private final static String PREFIX = \"java:global\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private final static String SEPARATOR = \"/\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private final static String PROPERTY_FILE = \"/global.jndi\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private final static String MODULE_NAME_KEY = \"module.name\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private final static String APP_NAME_KEY = \"application.name\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Properties globalConfiguration;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String appName;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String moduleName;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String beanName;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String businessInterfaceName;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public GlobalJNDIName() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.builder = new StringBuilder();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.builder.append(PREFIX).append(SEPARATOR);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.globalConfiguration = new Properties();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.globalConfiguration.load(this.getClass().getResourceAsStream(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("PROPERTY_FILE));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception ex) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\"Cannot load configuration: \" + ex);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.appName = this.globalConfiguration.getProperty(APP_NAME_KEY);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.moduleName = this.globalConfiguration.getProperty(MODULE_NAME_KEY);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public GlobalJNDIName withAppName(String appName) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.appName = appName;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public GlobalJNDIName withModuleName(String moduleName) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.moduleName = moduleName;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public GlobalJNDIName withBeanName(String beanName) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.beanName = beanName;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public GlobalJNDIName withBeanName(Class beanClass) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return withBeanName(computeBeanName(beanClass));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public GlobalJNDIName withBusinessInterface(Class interfaze) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.businessInterfaceName = interfaze.getName();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String computeBeanName(Class beanClass) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Stateless stateless = (Stateless) beanClass");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".getAnnotation(Stateless.class);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (stateless != null && isNotEmpty(stateless.name())) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return stateless.name();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Stateful stateful = (Stateful) beanClass.getAnnotation(Stateful.class);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (stateful != null && isNotEmpty(stateful.name())) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return stateful.name();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Singleton singleton = (Singleton) beanClass");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".getAnnotation(Singleton.class);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (singleton != null && isNotEmpty(singleton.name())) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return singleton.name();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return beanClass.getSimpleName();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private boolean isNotEmpty(String name) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (name != null && !name.isEmpty());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String asString() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (appName != null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.builder.append(appName).append(SEPARATOR);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (moduleName != null)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.builder.append(moduleName).append(SEPARATOR);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (beanName != null)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.builder.append(beanName);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (businessInterfaceName != null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.builder.append(\"!\").append(businessInterfaceName);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.builder.toString();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public <T> T locate(Class<T> clazz) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return BeanLocator.lookup(clazz, asString());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Object locate() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return BeanLocator.lookup(asString());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
