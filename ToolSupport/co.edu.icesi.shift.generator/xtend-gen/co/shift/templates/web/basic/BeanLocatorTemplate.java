package co.shift.templates.web.basic;

import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class BeanLocatorTemplate {
  public static CharSequence generate(final String packageName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("This file is part of javaee-patterns.");
    _builder.newLine();
    _builder.newLine();
    _builder.append("javaee-patterns is free software; you can redistribute it and/or modify");
    _builder.newLine();
    _builder.append("it under the terms of the GNU General Public License as published by");
    _builder.newLine();
    _builder.append("the Free Software Foundation; either version 2 of the License, or");
    _builder.newLine();
    _builder.append("(at your option) any later version.");
    _builder.newLine();
    _builder.newLine();
    _builder.append("javaee-patterns is distributed in the hope that it will be useful,");
    _builder.newLine();
    _builder.append("but WITHOUT ANY WARRANTY; without even the implied warranty of");
    _builder.newLine();
    _builder.append("MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the");
    _builder.newLine();
    _builder.append("GNU General Public License for more details.");
    _builder.newLine();
    _builder.newLine();
    _builder.append("You should have received a copy of the GNU General Public License");
    _builder.newLine();
    _builder.append("along with this program.  If not, see <http://www.opensource.org/licenses/gpl-2.0.php>.");
    _builder.newLine();
    _builder.newLine();
    _builder.append("* Copyright (c) 04. August 2009 Adam Bien, blog.adam-bien.com");
    _builder.newLine();
    _builder.append("* http://press.adam-bien.com");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("package co.shift.");
    String _lowerCase = packageName.toLowerCase();
    _builder.append(_lowerCase, "");
    _builder.append(".util.beanlocator;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import javax.naming.Context;");
    _builder.newLine();
    _builder.append("import javax.naming.InitialContext;");
    _builder.newLine();
    _builder.append("import javax.naming.NamingException;");
    _builder.newLine();
    _builder.append("import javax.rmi.PortableRemoteObject;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import co.shift.");
    String _lowerCase_1 = packageName.toLowerCase();
    _builder.append(_lowerCase_1, "");
    _builder.append(".util.beanlocator.GlobalJNDIName;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Hides and simplifies the access to objects stored in the JNDI-tree.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @author Adam Bien, www.adam-bien.com");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class BeanLocator {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private GlobalJNDIName globalJNDIName;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public BeanLocator(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("globalJNDIName = new GlobalJNDIName();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public GlobalJNDIName getGlobalJNDIName(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return globalJNDIName;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param clazz the type (Business Interface or Bean Class)");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param jndiName the global JNDI name with the pattern: java:global[/<app-name>]/<module-name>/<bean-name>#<fully-qualified-");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("interface-name>");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return The local or remote reference to the bean.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static <T> T lookup(Class<T> clazz, String jndiName) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Object bean = lookup(jndiName);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return clazz.cast(PortableRemoteObject.narrow(bean, clazz));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static Object lookup(String jndiName) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Context context = null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("context = new InitialContext();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return context.lookup(jndiName);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} catch (NamingException ex) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new IllegalStateException(\"Cannot connect to bean: \" + jndiName + \" Reason: \" + ex, ex.getCause());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} finally {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("context.close();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} catch (NamingException ex) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("throw new IllegalStateException(\"Cannot close InitialContext. Reason: \" + ex, ex.getCause());");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
