package co.shift.templates.ejb.contributed.confidentiality;

import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class PBECryptographyTemplate {
  public static CharSequence generate(final String packageName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package co.shift.");
    String _lowerCase = packageName.toLowerCase();
    _builder.append(_lowerCase, "");
    _builder.append(".security;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.io.UnsupportedEncodingException;");
    _builder.newLine();
    _builder.append("import java.security.InvalidAlgorithmParameterException;");
    _builder.newLine();
    _builder.append("import java.security.InvalidKeyException;");
    _builder.newLine();
    _builder.append("import java.security.NoSuchAlgorithmException;");
    _builder.newLine();
    _builder.append("import java.security.spec.InvalidKeySpecException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.crypto.BadPaddingException;");
    _builder.newLine();
    _builder.append("import javax.crypto.Cipher;");
    _builder.newLine();
    _builder.append("import javax.crypto.IllegalBlockSizeException;");
    _builder.newLine();
    _builder.append("import javax.crypto.NoSuchPaddingException;");
    _builder.newLine();
    _builder.append("import javax.crypto.SecretKey;");
    _builder.newLine();
    _builder.append("import javax.crypto.SecretKeyFactory;");
    _builder.newLine();
    _builder.append("import javax.crypto.spec.PBEKeySpec;");
    _builder.newLine();
    _builder.append("import javax.crypto.spec.PBEParameterSpec;");
    _builder.newLine();
    _builder.append("import javax.ejb.Stateless;");
    _builder.newLine();
    _builder.append("import org.apache.commons.codec.binary.Base64;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Stateless");
    _builder.newLine();
    _builder.append("public class PBECryptographyManager {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private PBEKeySpec pbeKeySpec;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private PBEParameterSpec pbeParamSpec;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private SecretKeyFactory keyFac;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private SecretKey pbeKey;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Cipher pbeCipher;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final int ENCRYPT = Cipher.ENCRYPT_MODE;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final int DECRYPT = Cipher.DECRYPT_MODE;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Salt");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private byte[] salt = { (byte) 0xc7, (byte) 0x73, (byte) 0x21, (byte) 0x8c,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(byte) 0x7e, (byte) 0xc8, (byte) 0xee, (byte) 0x99 };");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Iteration count");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final int COUNT = 20;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public PBECryptographyManager() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Create PBE parameter set");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("pbeParamSpec = new PBEParameterSpec(salt, COUNT);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("pbeKeySpec = new PBEKeySpec(\"PCSUI\".toCharArray());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("keyFac = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("pbeKey = keyFac.generateSecret(pbeKeySpec);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Create PBE Cipher");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("} catch (NoSuchAlgorithmException e) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("} catch (InvalidKeySpecException e) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("} catch (NoSuchPaddingException e) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public char[] doFinal(int mode, String text) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("switch (mode) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case ENCRYPT:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("pbeCipher.init(Cipher.ENCRYPT_MODE, pbeKey, pbeParamSpec);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("byte[] encryptedData = pbeCipher.doFinal(text.getBytes(\"UTF-8\"));");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return new String(Base64.encodeBase64(encryptedData)).toCharArray();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case DECRYPT:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("byte[] decodedData = Base64.decodeBase64(text);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("pbeCipher.init(Cipher.DECRYPT_MODE, pbeKey, pbeParamSpec);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("byte[] utf8 = pbeCipher.doFinal(decodedData);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return new String(utf8, \"UTF8\").toCharArray();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("default:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (InvalidKeyException | InvalidAlgorithmParameterException");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("| IllegalBlockSizeException | BadPaddingException  e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}catch (UnsupportedEncodingException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;\t\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
