«DEFINE PanelOrder(String systemName, kernelMetamodel::System system) FOR guiMetamodel::OrderView»
	«LET systemName.trim().toFirstUpper() AS systemNameVar»
		«FILE "/unicesi/driso/gui/PanelOrder.java"»
			package unicesi.driso.gui;
			
			import java.awt.BorderLayout;
			import java.awt.event.ActionEvent;
			import java.awt.event.ActionListener;
			
			import javax.swing.ComboBoxModel;
			import javax.swing.DefaultComboBoxModel;
			import javax.swing.JButton;
			import javax.swing.JComboBox;
			import javax.swing.JOptionPane;
			
			import javax.swing.JPanel;
			import javax.swing.border.TitledBorder;
			
			import unicesi.driso.«systemNameVar.toLowerCase()».kernel.*;
			
			public class PanelOrder extends JPanel implements ActionListener
			{
				private static final long serialVersionUID = 1L;
				
				private «systemNameVar» facadeSystem;
				private final static String ORDER = "order";
				private JComboBox jComboBoxOrder;
				private JButton jButtonOrder;
				
				public PanelOrder()
				{
					facadeSystem = «systemNameVar».getInstance();
					setLayout(new BorderLayout());
					setBorder(new TitledBorder("Order By"));
					this.setPreferredSize(new java.awt.Dimension(294, 121));
					{
						ComboBoxModel jComboBoxOrderModel = new DefaultComboBoxModel(getComboBoxModel());
						jComboBoxOrder = new JComboBox();
						this.add(jComboBoxOrder, BorderLayout.NORTH);
						jComboBoxOrder.setModel(jComboBoxOrderModel);
						jComboBoxOrder.setPreferredSize(new java.awt.Dimension(164, 35));
					}
					{
						jButtonOrder = new JButton();
						this.add(jButtonOrder, BorderLayout.SOUTH);
						jButtonOrder.setText("Order «system.element.name.trim().toFirstUpper()»s");
						jButtonOrder.setActionCommand(ORDER);
						jButtonOrder.addActionListener(this);
						jButtonOrder.setPreferredSize(new java.awt.Dimension(284, 35));
					}
				}
				
				«EXPAND getComboBoxModel FOR system»
				
				«EXPAND actionPerformed FOR system»
			}
		«ENDFILE»
	«ENDLET»
«ENDDEFINE»

«DEFINE getComboBoxModel FOR kernelMetamodel::System»
	private String[] getComboBoxModel()
	{
		String[] model = new String[]{
		«FOREACH sorts.select(e | e.algorithm == kernelMetamodel::SortAlgorithm::BUBBLE) AS attribute SEPARATOR ',' -»
		"«attribute.name»"
		«ENDFOREACH -»
			};
		return model;
	}
«ENDDEFINE»

«DEFINE actionPerformed FOR kernelMetamodel::System»
	@Override
	public void actionPerformed(ActionEvent e){
        String command = e.getActionCommand();
        if (command.equals(ORDER))
        {
            String attributeName = (String) jComboBoxOrder.getSelectedItem();
			«EXPAND callSort FOR this»            
        }
    }
«ENDDEFINE»

«DEFINE callSort FOR kernelMetamodel::System»
	if (attributeName != null && !attributeName.equals(""))
	{
		«FOREACH element.attributes AS attribute»
			if (attributeName.equals("«attribute.name»"))
			{
				«IF sorts.select(s | s.attribute == attribute).size == 1»
					«IF sorts.exists(s | s.attribute == attribute && s.algorithm == kernelMetamodel::SortAlgorithm::INSERTION)»
							facadeSystem.insertionSortBy«attribute.name.toFirstUpper()»();				
					«ELSEIF sorts.exists(s | s.attribute == attribute && s.algorithm == kernelMetamodel::SortAlgorithm::BUBBLE)»
							facadeSystem.bubbleSortBy«attribute.name.toFirstUpper()»();
					«ENDIF»	
				«ELSEIF sorts.select(s | s.attribute == attribute).size > 1»
					Object[] algorithms = {"Bubble", "Insertion"};
					String option = (String) JOptionPane.showInputDialog(
			                this,
			                "Ordering Algorithm:\n",
			                "",
			                JOptionPane.PLAIN_MESSAGE,
			                null,
			                algorithms,
			                "Bubble");
					
					if (option != null)
					{
						if(option.equals(algorithms[0]))
						{
							 facadeSystem.bubbleSortBy«attribute.name.toFirstUpper()»();				
						}
						else if(option.equals(algorithms[1]))
						{
							facadeSystem.insertionSortBy«attribute.name.toFirstUpper()»();
						}
					}
				«ENDIF»
			}
		«ENDFOREACH»
	}
«ENDDEFINE»